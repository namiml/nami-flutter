name: Generate Test Flutter STG (Manual)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git Tag, Branch or SHA to build"
        required: true
        default: "develop"
    secrets:
      BUILD_USER_PAT:
        required: true

jobs:
  build-android:
    name: Generate Test Flutter for TestFlight
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "2.0.5"
      - name: Checkout ${{ inputs.ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.ref }}
          path: source

      - name: Install Google API python client
        run: |
          pip install google-api-python-client

      - name: Get new version code
        working-directory: sdk-android
        run: |
          echo $GOOGLE_PLAY_SERVICE_ACCOUNT > $RUNNER_TEMP/.service_account
          python3 build-utils/get_version_code.py $RUNNER_TEMP/.service_account com.namiml.testflutter.stg internal  --quiet >> $RUNNER_TEMP/.new_version_code
          rm -f .service_account
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}

      - name: Create the Keystore
        run: |
          # import keystore from secrets
          echo KEY_STORE_BASE64 | base64 -d > $RUNNER_TEMP/my_production.keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEY_STORE_BASE64 }}

      - name: Get dependencies
        run: flutter pub get

      - name: Build Android App Bundle
        working-directory: source/example/testnami/android
        run: flutter build appbundle -t lib/main-production.dart --flavor STG --release

      - name: Sign Android App Bundle
        working-directory: source/example/testnami
        run: jarsigner -keystore $RUNNER_TEMP/my_production.keystore -storepass ${{ secrets.KEY_STORE_PASSWORD }} -keypass ${{ secrets.KEYSTORE_PASSWORD_ALIAS }} -sigalg SHA256withRSA -digestalg SHA-256 -signedjar build/app/outputs/bundle/STGRelease/app-STG-release.aab ${{ secrets/KEYSTORE_PASSWORD_ALIAS }}

      - name: Uploading to test track
        uses: r0adkll/upload-google-play@v1.0.17
        with:
          # Your service account JSON GitHub secret
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          # Your package name
          packageName: 'com.namiml.testflutter.stg'
          releaseFiles: 'example/testnami/build/app/outputs/bundle/STGRelease/app-STG-release.aab'
          status: completed
          track: internal

  build-ios:
    name: Generate Test Flutter for TestFlight
    runs-on: macos-latest
    permissions:
      actions: write
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "2.0.5"

      - name: Checkout ${{ inputs.ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.ref }}
          path: source

      - name: Checkout appstoreconnect-build-tools
        uses: actions/checkout@v2
        with:
          repository: namiml/appstoreconnect-build-tools
          ref: "main"
          path: appstoreconnect-build-tools

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"

      - name: Get expected build number
        working-directory: appstoreconnect-build-tools
        run: |-
          pip3 install requests
          pip3 install pydantic
          pip3 install cryptography
          pip3 install PyJWT
          python3 get_next_build.py com.namiml.stg.testflutter--prerelease > $RUNNER_TEMP/.next_build_number_stg
        env:
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

    - name: Install the provisioning profile
      env:
        PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.IOS_MOBILE_PROVISION_BASE64 }}
      run: |
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

        echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output $PP_PATH

        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Get dependencies
        run: flutter pub get

      - name: Update ExportOptions.plist
        working-directory: source/example/testnami/ios
        run: |-
          sed -i '' -e "s/APPSTORE_TEAM_ID/${{ secrets.APPSTORE_TEAM_ID}}/" ExportOptions.plist
          sed -i '' -e "s/APPSTORE_PROVISIONING_PROFILE_UUID/${{ secrets.APPSTORE_PROVISIONING_PROFILE_UUID}}/g" ExportOptions.plist

      - name: Build iOS
        working-directory: source/example/testnami
        run: |-
          export BUILD_NUMBER_STG=`cat ~/.next_build_number_stg`
          flutter build ios --release --no-codesign --flavor STG --release-number $BUILD_NUMBER_STG

      - name: Build resolve Swift dependencies
        working-directory: source/example/testnami
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme STG -configuration Release

      - name: Build xArchive
        working-directory: source/example/testnami
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace -scheme STG -configuration Release DEVELOPMENT_TEAM=${{ secrets.APPSTORE_TEAM_ID}} -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app-stg.xcarchive PROVISIONING_PROFILE=${{ secrets.APPSTORE_PROVISIONING_PROFILE_UUID}} clean archive CODE_SIGN_IDENTITY="${{ secrets.CODE_SIGNING_IDENTITY }}"

      - name: Export IPA
        run: xcodebuild -exportArchive -archivePath build-output/app-stg.xcarchive -exportPath build-output/ios-stg -exportOptionsPlist ios/ExportOptions.plist

      - name: Publish iOS Artifacts - STG
        uses: actions/upload-artifact@v1
        with:
          name: release-ios
          path: build-output/ios-stg

      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: 'output.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
