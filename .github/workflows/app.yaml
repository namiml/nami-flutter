name: Generate Test Flutter STG
on:
  workflow_dispatch:
    inputs:
      ref:
        default: develop
        description: 'Git Tag, Branch or SHA to build'
        required: true
    secrets:
      BUILD_USER_PAT:
        required: true

  pull_request:
    types:
      - closed
    branches:
      - develop
    secrets:
      BUILD_USER_PAT:
        required: true

jobs:
  build-android:
    name: Generate Test Flutter for TestFlight
    permissions:
      actions: write
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 12.x
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: 2.0.5
      - name: 'Checkout ${{ inputs.ref }}'
        uses: actions/checkout@v2
        with:
          path: source
          ref: '${{ inputs.ref }}'
      - name: Install Google API python client
        run: |
          pip install google-api-python-client
      - env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}'
        name: Get new version code
        run: >
          echo $GOOGLE_PLAY_SERVICE_ACCOUNT > $RUNNER_TEMP/.service_account

          python3 build-utils/get_version_code.py $RUNNER_TEMP/.service_account
          com.namiml.testflutter.stg internal  --quiet >>
          $RUNNER_TEMP/.new_version_code

          rm -f .service_account
        working-directory: sdk-android
      - env:
          KEYSTORE_BASE64: '${{ secrets.KEY_STORE_BASE64 }}'
        name: Create the Keystore
        run: >
          # import keystore from secrets

          echo KEY_STORE_BASE64 | base64 -d >
          $RUNNER_TEMP/my_production.keystore
      - name: Get dependencies
        run: flutter pub get
      - name: Build Android App Bundle
        run: >-
          flutter build appbundle -t lib/main-production.dart --flavor STG
          --release
        working-directory: source/example/testnami/android
      - name: Sign Android App Bundle
        run: >-
          jarsigner -keystore $RUNNER_TEMP/my_production.keystore -storepass ${{
          secrets.KEY_STORE_PASSWORD }} -keypass ${{
          secrets.KEYSTORE_PASSWORD_ALIAS }} -sigalg SHA256withRSA -digestalg
          SHA-256 -signedjar
          build/app/outputs/bundle/STGRelease/app-STG-release.aab ${{
          secrets/KEYSTORE_PASSWORD_ALIAS }}
        working-directory: source/example/testnami
      - name: Uploading to test track
        uses: r0adkll/upload-google-play@v1.0.17
        with:
          packageName: com.namiml.testflutter.stg
          releaseFiles: >-
            example/testnami/build/app/outputs/bundle/STGRelease/app-STG-release.aab
          serviceAccountJsonPlainText: '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}'
          status: completed
          track: internal
  build-ios:
    name: Generate Test Flutter for TestFlight
    permissions:
      actions: write
      contents: write
      id-token: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 12.x
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: 2.0.5
      - name: 'Checkout ${{ inputs.ref }}'
        uses: actions/checkout@v2
        with:
          path: source
          ref: '${{ inputs.ref }}'
      - name: Checkout appstoreconnect-build-tools
        uses: actions/checkout@v2
        with:
          path: appstoreconnect-build-tools
          ref: main
          repository: namiml/appstoreconnect-build-tools
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.10'
      - env:
          APPSTORE_API_KEY_ID: '${{ secrets.APPSTORE_API_KEY_ID }}'
          APPSTORE_API_PRIVATE_KEY: '${{ secrets.APPSTORE_API_PRIVATE_KEY }}'
          APPSTORE_ISSUER_ID: '${{ secrets.APPSTORE_ISSUER_ID }}'
        name: Get expected build number
        run: >-
          pip3 install requests

          pip3 install pydantic

          pip3 install cryptography

          pip3 install PyJWT

          python3 get_next_build.py com.namiml.stg.testflutter--prerelease >
          $RUNNER_TEMP/.next_build_number_stg
        working-directory: appstoreconnect-build-tools
      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: '${{ secrets.IOS_P12_BASE64 }}'
          p12-password: '${{ secrets.IOS_CERTIFICATE_PASSWORD }}'
      - env:
          PROVISIONING_CERTIFICATE_BASE64: '${{ secrets.IOS_MOBILE_PROVISION_BASE64 }}'
        name: Install the provisioning profile
        run: >
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision


          echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output
          $PP_PATH


          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Get dependencies
        run: flutter pub get
      - name: Update ExportOptions.plist
        run: >-
          sed -i '' -e "s/APPSTORE_TEAM_ID/${{ secrets.APPSTORE_TEAM_ID}}/"
          ExportOptions.plist

          sed -i '' -e "s/APPSTORE_PROVISIONING_PROFILE_UUID/${{
          secrets.APPSTORE_PROVISIONING_PROFILE_UUID}}/g" ExportOptions.plist
        working-directory: source/example/testnami/ios
      - name: Build iOS
        run: >-
          export BUILD_NUMBER_STG=`cat ~/.next_build_number_stg`

          flutter build ios --release --no-codesign --flavor STG
          --release-number $BUILD_NUMBER_STG
        working-directory: source/example/testnami
      - name: Build resolve Swift dependencies
        run: >-
          xcodebuild -resolvePackageDependencies -workspace
          ios/Runner.xcworkspace -scheme STG -configuration Release
        working-directory: source/example/testnami
      - name: Build xArchive
        run: >
          xcodebuild -workspace ios/Runner.xcworkspace -scheme STG
          -configuration Release DEVELOPMENT_TEAM=${{ secrets.APPSTORE_TEAM_ID}}
          -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath
          build-output/app-stg.xcarchive PROVISIONING_PROFILE=${{
          secrets.APPSTORE_PROVISIONING_PROFILE_UUID}} clean archive
          CODE_SIGN_IDENTITY="${{ secrets.CODE_SIGNING_IDENTITY }}"
        working-directory: source/example/testnami
      - name: Export IPA
        run: >-
          xcodebuild -exportArchive -archivePath build-output/app-stg.xcarchive
          -exportPath build-output/ios-stg -exportOptionsPlist
          ios/ExportOptions.plist
      - name: Publish iOS Artifacts - STG
        uses: actions/upload-artifact@v1
        with:
          name: release-ios
          path: build-output/ios-stg
      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          api-key-id: '${{ secrets.APPSTORE_API_KEY_ID }}'
          api-private-key: '${{ secrets.APPSTORE_API_PRIVATE_KEY }}'
          app-path: output.ipa
          issuer-id: '${{ secrets.APPSTORE_ISSUER_ID }}'